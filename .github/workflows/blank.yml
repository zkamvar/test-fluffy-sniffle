# This is a basic workflow to help you get started with Actions

name: CI
defaults:
  run:
    shell: bash

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        thing: [1, 2, 3, 4, 5]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        id: run
        run: |
          if [[ ${{ matrix.thing }} != 4 ]]; then
            echo Hello, world! > out-${{ matrix.thing }}-thing
            echo "ok=true" >> "$GITHUB_OUTPUT"
          else
            echo "ok=false" >> "$GITHUB_OUTPUT"
          fi
      - uses: actions/upload-artifact@v4
        if: ${{ fromJSON(steps.run.outputs.ok) }}
        with:
          name: status-${{ matrix.thing }}
          path: out-${{ matrix.thing }}-thing
  get-things:
    needs: [build]
    outputs:
      mat: ${{ steps.list.outputs.ok }}
    runs-on: ubuntu-latest
    steps:
      - id: fetch-artifacts
        uses: actions/download-artifact@v4
        with:
          path: results
          pattern: status-*
          merge-multiple: true
      - id: list
        run: |
          # fetch the array of results
          results=(results/*)
          {
            # https://stackoverflow.com/a/26809318
            printf '%s\n' "${results[@]/results\/out-/}" | jq -R . | jq -s .
          } >> "$GITHUB_OUTPUT"
      - run: echo "${{ steps.list.outputs.ok }}"
  show-things:
    needs: [get-things]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        thang: ${{ fromJSON(needs.outputs.get-things.mat) }}
    steps:
      - run: echo ${{ matrix.thang }}
